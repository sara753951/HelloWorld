//ÁªôÂÆö‰∏Ä‰∏™‰∫åÂèâÊ†ëÔºåËøîÂõûÊâÄÊúâ‰ªéÊ†πËäÇÁÇπÂà∞Âè∂Â≠êËäÇÁÇπÁöÑË∑ØÂæÑ„ÄÇ 
//
// ËØ¥Êòé: Âè∂Â≠êËäÇÁÇπÊòØÊåáÊ≤°ÊúâÂ≠êËäÇÁÇπÁöÑËäÇÁÇπ„ÄÇ 
//
// Á§∫‰æã: 
//
// ËæìÂÖ•:
//
//   1
// /   \
//2     3
// \
//  5
//
//ËæìÂá∫: ["1->2->5", "1->3"]
//
//Ëß£Èáä: ÊâÄÊúâÊ†πËäÇÁÇπÂà∞Âè∂Â≠êËäÇÁÇπÁöÑË∑ØÂæÑ‰∏∫: 1->2->5, 1->3 
// Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ 
// üëç 349 üëé 0

package program.learning.leetcode.leetcode.editor.cn;

import com.alibaba.fastjson.JSON;

import java.util.*;

public class Id257BinaryTreePaths {
    public static void main(String[] args) {
        Solution solution = new Id257BinaryTreePaths().new Solution();
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.left.right = new TreeNode(5);
        root.right = new TreeNode(3);
        List<String> re = solution.binaryTreePaths(root);
        System.out.println(JSON.toJSONString(re));
    }
    //leetcode submit region begin(Prohibit modification and deletion)

    class Solution {
        public List<String> binaryTreePaths(TreeNode root) {
            List<String> result = new ArrayList<>();
            String path = "";
            constructPath(root, result, path);
            return result;
        }

        private void constructPath(TreeNode node, List<String> result, String path) {
            if (node != null) {
                StringBuilder sb = new StringBuilder(path);
                sb.append(node.val);
                if (node.left == null && node.right == null) {
                    result.add(sb.toString());
                } else {
                    sb.append("->");
                    constructPath(node.left, result, sb.toString());
                    constructPath(node.right, result, sb.toString());
                }
            }
        }
    }
    //leetcode submit region end(Prohibit modification and deletion)

    
}